#+BEGIN_SRC emacs-lisp
  (neo/enter-include "neo-fonts.org")
#+END_SRC

*** Fonts
The following fragment will be used by ~scripts/install-fonts~. Don't run
it blindly, as is it takes a lot of disk space (the google fonts
alone, are 650MB when zipped and 1.5GB uncompressed; nobody really
needs all of them). Unfortunately, I don't know of a scriptable way
for downloading  individual families.

Fragments labeled ~sh-install-fonts~ are executed in a temp directory,
no need to cleanup.

#+begin_src sh-install-fonts
echo "Installing fonts"

#echo "Google Web Fonts (650MB/1.5GB)"
#wget https://github.com/google/fonts/archive/main.zip -q

#Roboto
#Roboto Condensed
#Roboto Mono
#Inconsolata
#Source Sans Pro
#Cabin (or Cabin Sketch)
#Architects Daughter
#FasterOne
#GochiHand
# YanoneKaffeesatz

if [[ ! -f ${HOME}/.fonts/MaterialIcons-Regular.ttf ]]; then
echo "Material Icons (309MB/2.1GB)"
wget https://github.com/google/material-design-icons/archive/refs/tags/4.0.0.zip -q
unzip 4.0.0.zip
cp material-design-icons-4.0.0/font/MaterialIcons-Regular.ttf ${HOME}/.fonts
cp material-design-icons-4.0.0/font/MaterialIconsOutlined-Regular.otf ${HOME}/.fonts
cp material-design-icons-4.0.0/font/MaterialIconsRound-Regular.otf ${HOME}/.fonts
cp material-design-icons-4.0.0/font/MaterialIconsSharp-Regular.otf ${HOME}/.fonts
cp material-design-icons-4.0.0/font/MaterialIconsTwoTone-Regular.otf ${HOME}/.fonts
rm -rf material-design-icons-4.0.0
else
echo "Skipping Material Icons"
fi

echo "JetBrainsMono"
wget https://download.jetbrains.com/fonts/JetBrainsMono-2.225.zip -q
unzip JetBrainsMono-2.225.zip
cp fonts/ttf/*.ttf ${HOME}/.fonts/
cp fonts/variable/*ttf ${HOME}/.fonts
rm -rf fonts

fc-cache
#+end_src

The following is for some reason executed when using the new org babel extraction code.

#+begin_src emacs-lisp
  (use-package emacs
    :ensure nil
    :init
    (defun neo/display-geometry ()
      (let ((command "xrandr|grep primary|sed 's/^.* \\([0-9]\\+\\)x\\([0-9]\\+\\).* \\([0-9]\\+\\)mm.* \\([0-9]\\+\\)mm.*$/\\1 \\2 \\3 \\4/'"))
        (mapcar #'string-to-number (split-string (shell-command-to-string command) " " t "[ ]+"))))

    ;;; height here is in 1/10 of a pt. 10pt is 3.528mm. Not much make sense here. My laptop has ~266dpi in both X and Y.
    (set-face-attribute 'default nil :font "Source Code Pro" :height 160 :weight 'regular) ; :horiz 266 :vert 266)
    (set-face-attribute 'fixed-pitch nil :font "Source Code Pro" :height 160 :weight 'regular); :horiz 266 :vert 266)
    )
#+end_src

#+begin_src emacs-lisp
  (use-package mixed-pitch
      :hook
      (text-mode . mixed-pitch-mode)
      :config
      (set-face-attribute 'default nil :font "Source Code Pro" :height 160)
      (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono")
      (set-face-attribute 'variable-pitch nil :font "DejaVu Sans"))
#+end_src

#+begin_src emacs-lisp
  (use-package emojify
    :config (if (display-graphic-p)
                 (setq emojify-display-style 'image)
               (setq emojify-display-style 'unicode)
               )
               (setq emojify-emoji-set "emojione-v2.2.6")
;               (setq emojify-emoji-set "openmoji-v13-0")
    :init (global-emojify-mode 1))
#+end_src

#+begin_src emacs-lisp
 ; (ignore-errors (set-frame-font "JuliaMono-12"))
#+end_src

** Icons

Remember to run ~all-the-icons-install-fonts~

#+begin_src emacs-lisp
  (defun neo/maybe-install-fonts ()
    (let ((font-dir (concat (or (getenv "XDG_DATA_HOME")
                                (expand-file-name "~/.local/share"))
                                 "/fonts/")))
      (unless (file-exists-p (concat font-dir "all-the-icons.ttf"))
        (all-the-icons-install-fonts t))))
#+end_src

#+begin_src emacs-lisp
; should we use the after-init hook?
  (use-package all-the-icons :config (neo/maybe-install-fonts))
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src
